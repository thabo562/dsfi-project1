[
  {
    "objectID": "addition.html",
    "href": "addition.html",
    "title": "Adding numbers in R",
    "section": "",
    "text": "To add numbers in R use +\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "multiplication.html",
    "href": "multiplication.html",
    "title": "Multiplying numbers in R",
    "section": "",
    "text": "To multiply numbers in R use *\n\n2 * 3\n\n[1] 6"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Akuma, S., Lubem, T. and Adom, I.T., 2022. Comparing Bag of Words and TF-IDF with different models for hate speech detection from live tweets. *International Journal of Information Technology*, *14*(7), pp.3629-3635.\nMokhesi, S.P., 2003. *Nation-building in South Africa: Mandela and Mbeki Compared* (Doctoral dissertation, Stellenbosch: Stellenbosch University).\nPillai, V.G. and Chandran, L.R., 2020, August. Verdict prediction for indian courts using bag of words and convolutional neural network. In *2020 Third International Conference on Smart Systems and Inventive Technology (ICSSIT)* (pp. 676-683). IEEE."
  },
  {
    "objectID": "Index.html",
    "href": "Index.html",
    "title": "STA5073Z Assignment 1",
    "section": "",
    "text": "This study focuses on the aspect of machine learning and natural language processing to identify and rank various models for predictive purposes, specifically in the context of classifying sentences to South African presidents based on speeches from 1994 to 2022. The study explores the effectiveness of classification trees, feedforward neural networks (FFNN), and random forests while employing two different input structuring techniques: Bag of Words (BoW) and Term Frequency-Inverse Document Frequency (TF-IDF). The study draws from previous research, showcasing the versatility of BoW and TF-IDF in various applications and machine learning context in preparing text data for analytics. It also draws attention to the importance in choice between these techniques depends on the specific machine learning algorithms and kind of data being assessed. The findings reveal that FFNN performed slightly better than the other models but was still unable to effectively classify speeches to their respective presidents as the data was not equally representative of all the presidents."
  },
  {
    "objectID": "Index.html#abstract",
    "href": "Index.html#abstract",
    "title": "STA5073Z Assignment 1",
    "section": "",
    "text": "This study focuses on the aspect of machine learning and natural language processing to identify and rank various models for predictive purposes, specifically in the context of classifying sentences to South African presidents based on speeches from 1994 to 2022. The study explores the effectiveness of classification trees, feedforward neural networks (FFNN), and random forests while employing two different input structuring techniques: Bag of Words (BoW) and Term Frequency-Inverse Document Frequency (TF-IDF). The study draws from previous research, showcasing the versatility of BoW and TF-IDF in various applications and machine learning context in preparing text data for analytics. It also draws attention to the importance in choice between these techniques depends on the specific machine learning algorithms and kind of data being assessed. The findings reveal that FFNN performed slightly better than the other models but was still unable to effectively classify speeches to their respective presidents as the data was not equally representative of all the presidents."
  },
  {
    "objectID": "Index.html#introduction",
    "href": "Index.html#introduction",
    "title": "STA5073Z Assignment 1",
    "section": "Introduction",
    "text": "Introduction\nThe aim of this paper is to identify different machine learning models that can be used for predictive purposes, and rank them according to their ability to do so. With presidential speech from 1994 to 2022 from South African presidents, this paper will review the capacity in which classification trees , feed forward neural networks and random forests are able to accurately classify sentences to their presidents. The input structuring process will also vary between bag of words and TF-IDF so as to ascertain which one is more suitable for the data at hand with a selected machine learning model."
  },
  {
    "objectID": "Index.html#exploratory-data-analysis",
    "href": "Index.html#exploratory-data-analysis",
    "title": "STA5073Z Assignment 1",
    "section": "Exploratory Data analysis",
    "text": "Exploratory Data analysis\nThe dataset is made up of speeches across a span of 28 years by the last 6 presidents of South Africa.\n\n\n\n\n\nFigure 1: Top 20 words\n\n\n\n\nFigure 1 analysis offers a view into the evolution of linguistic patterns of the different presidents, excluding common stop words commonly found in sentences. A notable shift in the tone of State of the Nation addresses becomes evident when examined over the terms of the presidents.\nDuring De Klerk’s tenure, a government-centric tone is evident, characterized by a notable emphasis on references to the constitution, political parties, and elections. Subsequent presidents, however, steered their rhetoric towards the betterment of the nation. Mandela and Mbeki, in particular, championed themes of social welfare and upliftment. Being the first two presidents post-apartheid presidents their main goals were to rebuild the country and break down the racial barriers. Motlanthe, Zuma, and Ramaphosa, on the other hand, honed their focus on fostering the country’s economic development. This shift in presidential language reflects the dynamic trajectory of South Africa’s national priorities and the evolving role of its leadership in addressing the needs of the nation.\n\n\n\n\n\nFigure 2: Average Sentence Length\n\n\n\n\nFigure 2 shows long long each presidents speeches run on average."
  },
  {
    "objectID": "Index.html#methods",
    "href": "Index.html#methods",
    "title": "STA5073Z Assignment 1",
    "section": "Methods",
    "text": "Methods\n\nInput Methods\n\nBag-of words\nIn the realm of natural language processing, Bag-of-Words (BoW) stands as a valuable text modeling tool. Its primary function is to facilitate the extraction of essential keywords from text while filtering out less critical information. The BoW process begins by establishing a vocabulary based on the words present in the text data. It then represents various speeches by quantifying the frequency of these keywords within each speech. The resulting dataset is an array of speeches against keywords, each entry reflecting the frequency of a specific keyword in a given speech. This foundational approach serves as the basis for machine learning models employed to classify speeches to the president that gave them. The machine learning models tradionally work with numerical data rather than textual data. Text data is unstructured and ML models can only operate with structured data that is well defined so by BoW technique the techniques can be integrated with more ease.\nNotably, BoW has found applications in diverse contexts, such as a study in India where it was integrated with Convolutional Neural Networks to classify cases based on keyword analysis from case files. Remarkably, this study achieved an average accuracy rate of 85% (Pillai & Chandran, 2020). The following is a snippet of the BoW done on the SONA speeches. It does how the key words across all speeches become the columns of the array and the tally of each word in the two speeches is in their intersection.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSent_ID\npresident_13\ncommanders\ncomrades\ncorps\ndeputy\ndiplomatic\ndistinguished\n\n\n\n\n1\nMandela\n1\n1\n1\n3\n1\n1\n\n\n2\nMandela\n0\n0\n0\n0\n0\n0\n\n\n3\nMandela\n0\n0\n0\n0\n0\n0\n\n\n4\nMandela\n0\n0\n0\n0\n0\n0\n\n\n5\nMandela\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n?@tbl-bag-of-words\n\n\nTf-Idf\nTerm Frequency- Inverse Document Frequency (TF_IDF) is another input method used for text modelling.  It is similar to  BoW in that it considers the number of times a word is used in a line of text however, it also factors in how important that word is relative to the other words in the document. The TF measures how frequently a term appears in a document by diving the total number of times the term appears in the document by the total number of terms within that document. This emphasizes the terms that occur more frequently than others. The IDF  measures uniqueness/rarity of a term across a collection of documents. It is calculated by taking the logarithm of the total number of documents in the collection divided by the number of documents containing the term. The logarithm is used to scale down the impact of common words. The two part of the statistical measure are calculated as follows:\n\nTerm Frequency:  (Number of times the term appears in the document) / (Total number of terms in the document)\nInverse Document Frequency= In(Total number of documents / Number of documents containing the term)\n\nThere have been studies conducted using both BoW and TF-IDF which found that TF-IDF generally out performed BoW when combined with ML models,  however this will not always be the cases because there are countless ML algorithms that exist and each one has a particular method that will allow for the best fit with a given dataset. For example, a study conducted to identify hate speech in tweets found that TF_IDF performed best with Decision trees while BoW performed best with logistic regression, each method obtaining relatively high accuracies. (Akuma et al., 2022)\n\n\n\n\nTable 1: Snippet of TF-IDF\n\n\n\n\n\n\n\n\n\n\n\nSent_ID\npresident_13\nthe\nto\nof\nand\nnational\n\n\n\n\n3921\nMbeki\n-98.22858\n-41.35940\n-62.03910\n-46.52933\n0.000000\n\n\n4688\nMotlanthe\n-98.22858\n-20.67970\n-49.11429\n-41.35940\n-10.339850\n\n\n2887\nMbeki\n-82.71880\n-36.18948\n-69.79399\n-56.86917\n-2.584963\n\n\n3790\nMbeki\n-56.86917\n-74.96391\n-38.77444\n-23.26466\n0.000000\n\n\n5200\nZuma\n-41.35940\n0.00000\n-64.62406\n-20.67970\n-10.339850\n\n\n\n\n\n\nTable 1\n\n\n\nPredictive Models & Results\n\nClassification Trees\n\n\n\n\n\nFigure 3: Classification Tree for Bag-of-Words model\n\n\n\n\nFigure 3 shows a classification tree when text is modelled by BoW. The tree does not have a lot of branches which is indicative of poor classification. The only two presidents can be classified are Mbeki and Zuma , which means every sentence put into the model will return either one of those presidents which is not true. The following table shows the classification using the test dataset:\n\n\n\n\nTable 2: Confusion matrix for Bag-of-words model\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\n\n\n\n\ndeKlerk\n0\n0\n1\n0\n0\n28\n\n\nMandela\n0\n0\n16\n0\n0\n482\n\n\nMbeki\n0\n0\n55\n0\n0\n664\n\n\nMotlanthe\n0\n0\n9\n0\n0\n68\n\n\nRamaphosa\n0\n0\n0\n0\n0\n680\n\n\nZuma\n0\n0\n8\n0\n0\n785\n\n\n\n\n\n\nThe recorded classification rate of this model was 30% meaning the model The model is performing better than random guessing but still has significant room for improvement. The possible reasons for this low classification are unclear as it could be attributed to the model’s performance itself or underlying issues with the data. As previously mentioned in the data analysis, the number of speeches each president makes is different with some making one and others making more than 5, causing a high degree of class imbalance.\n\n\n\n\n\n?@fig-CT_TF-IDF\n\n\n\n\nTable 3: Confusion matrix for TF-IDF model\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\n\n\n\n\ndeKlerk\n0\n0\n10\n0\n0\n19\n\n\nMandela\n0\n0\n287\n0\n0\n212\n\n\nMbeki\n0\n0\n444\n0\n0\n280\n\n\nMotlanthe\n0\n0\n46\n0\n0\n33\n\n\nRamaphosa\n0\n0\n260\n0\n0\n425\n\n\nZuma\n0\n0\n178\n0\n0\n618\n\n\n\n\n\n\nTable 3\nThe classification rate achieved using the TF-IDF tool stands at 37.8%, demonstrating a slight improvement compared to the performance of the bag of words method, which doesn’t take into account the associated word weights. The table above shows how the observations are still only distributed between Mbeki and Zuma but this time the classification of the observations is more equally distributed between the two. Nevertheless, this accuracy rate remains notably low, suggesting that a basic classification tree might not be the most effective predictive model for the speech text data under investigation. Consequently, the next model to be explored will build upon the foundation of these basic classification trees, aiming to enhance predictive performance and capture the underlying complexities of the text data.\n\n\nRandom Forest\nRandom Forest revolves around an ensemble of decision trees reinforced by bagging. Bagging, short for Bootstrap Aggregating, reduces variance and adds stability to these decision trees. It begins by creating multiple subsets of the training data, each of equal size to the original dataset, formed by random selection with potential repetition. These bootstrapped subsets are then used to independently build individual decision trees, each providing a unique perspective on the text data. Once the trees are constructed, they collectively contribute to the final prediction through a majority vote. This aggregation enhances robustness and accuracy, particularly beneficial for text data.\nAdditionally, Random Forest introduces random feature selection, where only a subset of features is considered at each node during tree construction, helping to reduce correlation between the trees and avoid overfitting, which is a common challenge when dealing with high-dimensional text data. Additionally, it offers the capability to assess variable importance by considering the random feature selection, providing insights into the crucial elements determining the president which said the given sentence. The figure below shows the error rate of the random forest as the number of trees increase.\n\n\n\n\n\nFigure 4: BoW Random forest error rate\n\n\n\n\nFigure 4\nAs the number of trees in the model increases, it acquires a deeper understanding of the data, leading to a reduction in the error rate. Beginning with an initial error rate of 60%, by the 20th tree, the model shows improvement, successfully decreasing the error rate by 10%. This method is computationally expensive and so only 20 trees were considered. At this point it is unclear whether an increase in the number of trees will improve the accuracy of the test or lead to diminishing returns. All that can be said is that the error rate is better than that of the previous model.\n::: {#tbl-RF-CM-BOW .cell tbl-cap=’ Random Forest Confusion matrix for BoW model’} ::: {.cell-output-display} | | deKlerk| Mandela| Mbeki| Motlanthe| Ramaphosa| Zuma| class.error| |:———|——-:|——-:|—–:|———:|———:|—-:|———–:| |deKlerk | 10| 8| 17| 0| 11| 21| 0.8507463| |Mandela | 4| 315| 401| 3| 139| 296| 0.7279793| |Mbeki | 2| 215| 891| 2| 199| 375| 0.4709026| |Motlanthe | 0| 32| 69| 1| 30| 54| 0.9946237| |Ramaphosa | 0| 98| 287| 0| 819| 387| 0.4852294| |Zuma | 2| 121| 352| 2| 286| 1081| 0.4137744| ::: :::\nFor the presidents with fewer speeches in the dataset, such as deKlerk and Motlanthe, the error rates are notably high, with deKlerk reaching an error rate of 85.1% and Motlanthe experiencing a much more substantial error rate of 99.5%. Interestingly, this analysis reveals recurring patterns where a significant portion of deKlerk’s speeches are misclassified as Zuma, and Motlanthe’s speeches are predominantly classified as Mbeki.\nOn the other hand, for more prolific presidents like Mbeki and Zuma, the error rates are comparatively lower, with Mbeki achieving an error rate of 47.1% and Zuma having an error rate of 41.4%. However, it’s worth noting that the error rate for Zuma’s speeches has seen a notable increase in comparison to previous models, while Mbeki’s error rate has seen a significant decrease. These observations shed light on the model’s performance in handling classes with imbalanced data, indicating potential areas for improvement in correctly classifying the speeches of less frequently represented presidents.\n\n\n\n\n\nFigure 5: RF Variable Importance\n\n\n\n\nFigure 5 shows the top 30 most important features, each possessing a mean decrease Gini score exceeding 5. This score reflects the feature’s contribution to the reduction of Gini impurity, with higher scores indicating greater importance in the model’s predictive capability. The analysis has identified the two most influential words as ‘compatriots’ and ‘regard,’ both exhibiting mean decrease Gini scores exceeding 30. Following ,with a score of almost half, are ‘rand’ and ‘capture’ with mean decrease Gini scores just below 15. The same modelling is conducted on the TF-IDF data and the results were as follows:\n\n\n\n\n\nThe gradual decrease in error rate is almost identical to the bag of words model starting at about 60% and falling to 52% after 20 trees. This similarity may suggest that, at least up to this point, the additional complexity brought by the ensemble learning technique (as represented by the number of trees) yields a consistent and comparable improvement in predictive accuracy for both the BoW model and TF-IDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\nclass.error\n\n\n\n\ndeKlerk\n1\n9\n19\n0\n7\n32\n0.9852941\n\n\nMandela\n0\n246\n449\n3\n162\n306\n0.7890223\n\n\nMbeki\n2\n237\n829\n1\n206\n419\n0.5106257\n\n\nMotlanthe\n0\n26\n74\n0\n33\n54\n1.0000000\n\n\nRamaphosa\n0\n104\n253\n2\n731\n511\n0.5434104\n\n\nZuma\n3\n124\n256\n3\n308\n1166\n0.3731183\n\n\n\n\n\nThe depicted figure presents class errors in the TD-IDF model for each president. In comparison to the BoW approach, only sentences attributed to Zuma and Mbeki exhibited improved performance. Other presidents experienced an increase in class errors. For instance, DeKlerk’s class error rose by 13%, while Ramaphosa’s class error saw an 8% increase. This shows how the TF-IDF was not effective across all the presidential classes although it did record a lower overall classification rate of 50,6% compared to that of the BoW which was 51.1%. The figure below shows that the TF-IDF model had similar mean decrease Gini for the words of importance,with the addition of some stop words which were not remove in the case of this model such as ‘the’ and ‘of’\n\n\n\n\n\n\n\nFeed Forward Neural Network(FFNN)\nA feedforward neural network (FFNN) is a specific type of neural network architecture in which information flows in a unidirectional manner, from the input to the output, with no feedback loops from the outputs to the inputs. Neural networks are designed to recognize patterns in data and make more accurate decisions than traditional rule-based systems. An FFNN consists of three essential types of layers:\n\nInput Layer: The input layer is the initial component of the network where raw data is introduced. The number of nodes in this layer is determined by the number of variables or features present in the dataset. Each node corresponds to one of these input variables.\nHidden Layer(s): Hidden layers do the bulk of the work in the neural network. They receive the data from the input layer through weighted connections, where each connection has an associated weight and bias. These weights and biases represent the strength and offset of the connection, and they are adjusted during the training process to optimize the network’s performance. Within the hidden layer, a mathematical transformation known as an activation function is applied to the weighted inputs. This activation function introduces a non-linear aspect to the data, allowing the network to capture more complex relationships within the data. Different types of activation functions can be used, impacting how well the neural network learns and generalizes from the data.\nOutput Layer: The output layer is the final stage of the network responsible for producing the predicted values or classifications for each observation. The number of nodes in this layer is typically determined by the number of classes in categorical data or the desired output format. Each output node represents the probability that an observation belongs to a specific. The class with the highest probability is selected as the network’s prediction.\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n0\n5\n6\n8\n2\n1\n7\n\n\n1\n0\n253\n129\n4\n13\n99\n\n\n2\n0\n164\n380\n3\n16\n156\n\n\n3\n0\n26\n31\n3\n2\n15\n\n\n4\n0\n141\n108\n6\n89\n336\n\n\n5\n1\n87\n124\n2\n26\n553\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n0\n9\n10\n4\n0\n2\n4\n\n\n1\n2\n311\n123\n1\n38\n24\n\n\n2\n0\n169\n404\n6\n59\n86\n\n\n3\n1\n21\n35\n7\n4\n11\n\n\n4\n0\n120\n40\n3\n428\n94\n\n\n5\n0\n140\n101\n4\n137\n414"
  },
  {
    "objectID": "Index.html#discussion",
    "href": "Index.html#discussion",
    "title": "STA5073Z Assignment 1",
    "section": "Discussion",
    "text": "Discussion"
  },
  {
    "objectID": "Index.html#conclusion",
    "href": "Index.html#conclusion",
    "title": "STA5073Z Assignment 1",
    "section": "Conclusion",
    "text": "Conclusion\nPotentially explore CNNs for even higher accuracy results -It is proven that CNN has significance in the image processing domain by classifying and identifying the object, but it is highly feasible for using CNN in NLP domains.(rephrase)"
  },
  {
    "objectID": "Assignment1.html",
    "href": "Assignment1.html",
    "title": "STA5073Z Assignment 1",
    "section": "",
    "text": "This study focuses on the aspect of machine learning and natural language processing to identify and rank various models for predictive purposes, specifically in the context of classifying sentences to South African presidents based on speeches from 1994 to 2022. The study explores the effectiveness of classification trees, feedforward neural networks (FFNN), and random forests while employing two different input structuring techniques: Bag of Words (BoW) and Term Frequency-Inverse Document Frequency (TF-IDF). The study draws from previous research, showcasing the versatility of BoW and TF-IDF in various applications and machine learning context in preparing text data for analytics. It also draws attention to the importance in choice between these techniques depends on the specific machine learning algorithms and kind of data being assessed. The findings reveal that FFNN performed slightly better than the other models but was still unable to effectively classify speeches to their respective presidents as the data was not equally representative of all the presidents."
  },
  {
    "objectID": "Assignment1.html#abstract",
    "href": "Assignment1.html#abstract",
    "title": "STA5073Z Assignment 1",
    "section": "",
    "text": "This study focuses on the aspect of machine learning and natural language processing to identify and rank various models for predictive purposes, specifically in the context of classifying sentences to South African presidents based on speeches from 1994 to 2022. The study explores the effectiveness of classification trees, feedforward neural networks (FFNN), and random forests while employing two different input structuring techniques: Bag of Words (BoW) and Term Frequency-Inverse Document Frequency (TF-IDF). The study draws from previous research, showcasing the versatility of BoW and TF-IDF in various applications and machine learning context in preparing text data for analytics. It also draws attention to the importance in choice between these techniques depends on the specific machine learning algorithms and kind of data being assessed. The findings reveal that FFNN performed slightly better than the other models but was still unable to effectively classify speeches to their respective presidents as the data was not equally representative of all the presidents."
  },
  {
    "objectID": "Assignment1.html#introduction",
    "href": "Assignment1.html#introduction",
    "title": "STA5073Z Assignment 1",
    "section": "Introduction",
    "text": "Introduction\nThe aim of this paper is to identify different machine learning models that can be used for predictive purposes, and rank them according to their ability to do so. With presidential speech from 1994 to 2022 from South African presidents, this paper will review the capacity in which classification trees , feed forward neural networks and random forests are able to accurately classify sentences to their presidents. The input structuring process will also vary between bag of words and TF-IDF so as to ascertain which one is more suitable for the data at hand with a selected machine learning model."
  },
  {
    "objectID": "Assignment1.html#exploratory-data-analysis",
    "href": "Assignment1.html#exploratory-data-analysis",
    "title": "STA5073Z Assignment 1",
    "section": "Exploratory Data analysis",
    "text": "Exploratory Data analysis\nThe dataset is made up of speeches across a span of 28 years by the last 6 presidents of South Africa. The number of speeches made by each president is different which can cause discrepancies in the model building process. F.W. de Klerk and Motlanthe have one recorded speech each, while Nelson Mandela and Cyril Ramaphosa have seven speeches each. In contrast, Jacob Zuma and Thabo Mbeki have given ten speeches each.\nAs one might naturally expect, the analysis of these presidential speeches highlights the diversity in the communication styles adopted by each president. While it is not uncommon for certain speeches to share common themes or objectives, there is a difference in words and terminology adopted to put across the messages. Figure 1 analysis offers a view into the evolution of linguistic patterns of the different presidents, excluding common stop words commonly found in sentences. A notable shift in the tone of State of the Nation addresses becomes evident when examined over the terms of the presidents.\n\n\n\n\n\nFigure 1: Top 20 words\n\n\n\n\nDuring deKlerk’s term as president, a government-centric tone is evident, characterized by a significant focus on references to constitutional matters, political parties, and elections. Subsequent presidents, however, adopted a rhetoric that leaned more towards the betterment of the nation as a whole. Notably, Nelson Mandela and Thabo Mbeki, being the first two post-apartheid presidents, directed their attention towards themes of social welfare and national upliftment. Their primary objectives were to lead South Africa through a process of rebuilding and to dismantle the racial barriers that had long persisted under the rule of deKlerk (Mokhetsi, 2003).\nIn contrast, when Motlanthe, Zuma, and Ramaphosa assumed the presidency, there was a noticeable shift in their focus. They increasingly prioritized the task of fostering the country’s economic development. This transformation in presidential language and priorities underscores the dynamic trajectory of South Africa’s national agenda and the evolving role of its leadership in addressing the diverse needs and aspirations of the nation.\nIn addition to the specific words used by each president, the length of their speeches can also be seen as a predictor for which one of them made the speech. The figure below shows long long each presidents speeches run on average.\n\n\n\n\n\nFigure 2: Average Sentence Length\n\n\n\n\nAs mentioned before, the class imbalances present in the data pay a part in the outcome of the predictions and Figure 2 shows how much of difference there actually is. deKlerk’s speech comprised of only 97 sentences and this is a problem because he only has one speech in the dataset. Motlanthe also had one speech but he used almost 3 times as many sentences as deKlerk. The other presidents averaged about 250 words per speech, except for Ramaphosa who had an average of 327 sentences across his seven speeches. These differences in the number of speeches per president can lead to biased model outcomes. The models may be more inclined to predict or emphasize patterns or language styles associated with presidents who have a larger speech sample, potentially overlooking nuances in the speeches of presidents with fewer samples. To reduce the probability of this outcome, a stratified sampling approach is used, where the sampling proportion is not determined by the total number of observation in the data but rather by a set proportion to be sample from each president to allow for better representation. a random selection of 70% of the sentences made by each presidents are allocated to the training data and the remaining 30% to the test data."
  },
  {
    "objectID": "Assignment1.html#methods",
    "href": "Assignment1.html#methods",
    "title": "STA5073Z Assignment 1",
    "section": "Methods",
    "text": "Methods\n\nInput Methods\n\nBag-of words\nIn the realm of natural language processing, Bag-of-Words (BoW) stands as a valuable text modeling tool. Its primary function is to facilitate the extraction of essential keywords from text while filtering out less critical information. The BoW process begins by establishing a vocabulary based on the words present in the text data. It then represents various speeches by quantifying the frequency of these keywords within each speech. The resulting dataset is an array of speeches against keywords, each entry reflecting the frequency of a specific keyword in a given speech. This foundational approach serves as the basis for machine learning models employed to classify speeches to the president that gave them. The machine learning models tradionally work with numerical data rather than textual data. Text data is unstructured and ML models can only operate with structured data that is well defined so by BoW technique the techniques can be integrated with more ease.\nNotably, BoW has found applications in diverse contexts, such as a study in India where it was integrated with Convolutional Neural Networks to classify cases based on keyword analysis from case files. Remarkably, this study achieved an average accuracy rate of 85% (Pillai & Chandran, 2020). The following is a snippet of the BoW done on the SONA speeches. It shows the key words across all speeches as the columns of the array and the tally of each word in the sentence of a speech is in their intersection.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSent_ID\npresident_13\ncommanders\ncomrades\ncorps\ndeputy\ndiplomatic\ndistinguished\n\n\n\n\n1\nMandela\n1\n1\n1\n3\n1\n1\n\n\n2\nMandela\n0\n0\n0\n0\n0\n0\n\n\n3\nMandela\n0\n0\n0\n0\n0\n0\n\n\n4\nMandela\n0\n0\n0\n0\n0\n0\n\n\n5\nMandela\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nTf-Idf\nTerm Frequency- Inverse Document Frequency (TF_IDF) is another input method used for text modelling.  It is similar to  BoW in that it considers the number of times a word is used in a line of text however, it also factors in how important that word is relative to the other words in the document. The TF measures how frequently a term appears in a document by diving the total number of times the term appears in the document by the total number of terms within that document. This emphasizes the terms that occur more frequently than others. The IDF measures uniqueness/rarity of a term across a collection of documents. It is calculated by taking the logarithm of the total number of documents in the collection divided by the number of documents containing the term. The logarithm is used to scale down the impact of common words. The two part of the statistical measure are calculated as follows:\n\nTerm Frequency:  (Number of times the term appears in the document) / (Total number of terms in the document)\nInverse Document Frequency= In(Total number of documents / Number of documents containing the term)\n\nThere have been studies conducted using both BoW and TF-IDF which found that TF-IDF generally out performed BoW when combined with ML models,  however this will not always be the cases because there are countless ML algorithms that exist and each one has a particular method that will allow for the best fit with a given dataset. For example, a study conducted to identify hate speech in tweets found that TF_IDF performed best with Decision trees while BoW performed best with logistic regression, each method obtaining relatively high accuracies (Akuma et al., 2022).\n\n\n\n\nTable 1: Snippet of TF-IDF\n\n\n\n\n\n\n\n\n\n\n\nSent_ID\npresident_13\nthe\nto\nof\nand\nnational\n\n\n\n\n3921\nMbeki\n-98.22858\n-41.35940\n-62.03910\n-46.52933\n0.000000\n\n\n4688\nMotlanthe\n-98.22858\n-20.67970\n-49.11429\n-41.35940\n-10.339850\n\n\n2887\nMbeki\n-82.71880\n-36.18948\n-69.79399\n-56.86917\n-2.584963\n\n\n3790\nMbeki\n-56.86917\n-74.96391\n-38.77444\n-23.26466\n0.000000\n\n\n5200\nZuma\n-41.35940\n0.00000\n-64.62406\n-20.67970\n-10.339850\n\n\n\n\n\n\nTable 1 reveals distinct word weights within the sentences, where the weight of a given word varies depending on both the president and the specific sentence. A notable observation is that common words tend to exhibit extreme negative values so as to emphasize the uncommon words that can more easily identify a president’s sentence.\n\n\n\nPredictive Models & Results\n\nClassification Trees\n\n\n\n\n\nFigure 3: Classification Tree for Bag-of-Words model\n\n\n\n\nFigure 3 shows a classification tree when text is modelled by BoW. The tree does not have a lot of branches which is indicative of poor classification. The only two presidents can be classified are Mbeki and Zuma , which means every sentence put into the model will return either one of those presidents which is not true. The following table shows the classification using the test dataset:\n\n\n\n\nTable 2: Confusion matrix for Bag-of-words model\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\n\n\n\n\ndeKlerk\n0\n0\n1\n0\n0\n28\n\n\nMandela\n0\n0\n16\n0\n0\n482\n\n\nMbeki\n0\n0\n55\n0\n0\n664\n\n\nMotlanthe\n0\n0\n9\n0\n0\n68\n\n\nRamaphosa\n0\n0\n0\n0\n0\n680\n\n\nZuma\n0\n0\n8\n0\n0\n785\n\n\n\n\n\n\nThe recorded classification rate of this model was 30% meaning the model The model is performing better than random guessing but still has significant room for improvement. The possible reasons for this low classification are unclear as it could be attributed to the model’s performance itself or underlying issues with the data. As previously mentioned in the data analysis, the number of speeches each president makes is different with some making one and others making more than 5, causing a high degree of class imbalance.\n\n\n\n\n\n?@fig-CT_TF-IDF\n\n\n\n\nTable 3: Confusion matrix for TF-IDF model\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\n\n\n\n\ndeKlerk\n0\n0\n10\n0\n0\n19\n\n\nMandela\n0\n0\n287\n0\n0\n212\n\n\nMbeki\n0\n0\n444\n0\n0\n280\n\n\nMotlanthe\n0\n0\n46\n0\n0\n33\n\n\nRamaphosa\n0\n0\n260\n0\n0\n425\n\n\nZuma\n0\n0\n178\n0\n0\n618\n\n\n\n\n\n\nTable 3\nThe classification rate achieved using the TF-IDF tool stands at 37.8%, demonstrating a slight improvement compared to the performance of the bag of words method, which doesn’t take into account the associated word weights. The table above shows how the observations are still only distributed between Mbeki and Zuma but this time the classification of the observations is more equally distributed between the two. Nevertheless, this accuracy rate remains notably low, suggesting that a basic classification tree might not be the most effective predictive model for the speech text data under investigation. Consequently, the next model to be explored will build upon the foundation of these basic classification trees, aiming to enhance predictive performance and capture the underlying complexities of the text data.\n\n\nRandom Forest\nRandom Forest revolves around an ensemble of decision trees reinforced by bagging. Bagging, short for Bootstrap Aggregating, reduces variance and adds stability to these decision trees. It begins by creating multiple subsets of the training data, each of equal size to the original dataset, formed by random selection with potential repetition. These bootstrapped subsets are then used to independently build individual decision trees, each providing a unique perspective on the text data. Once the trees are constructed, they collectively contribute to the final prediction through a majority vote. This aggregation enhances robustness and accuracy, particularly beneficial for text data.\nAdditionally, Random Forest introduces random feature selection, where only a subset of features is considered at each node during tree construction, helping to reduce correlation between the trees and avoid overfitting, which is a common challenge when dealing with high-dimensional text data. Additionally, it offers the capability to assess variable importance by considering the random feature selection, providing insights into the crucial elements determining the president which said the given sentence. The figure below shows the error rate of the random forest as the number of trees increase.\n\n\n\n\n\nFigure 4: BoW Random forest error rate\n\n\n\n\nFigure 4\nAs the number of trees in the model increases, it acquires a deeper understanding of the data, leading to a reduction in the error rate. Beginning with an initial error rate of 60%, by the 20th tree, the model shows improvement, successfully decreasing the error rate by 10%. This method is computationally expensive and so only 20 trees were considered. At this point it is unclear whether an increase in the number of trees will improve the accuracy of the test or lead to diminishing returns. All that can be said is that the error rate is better than that of the previous model.\n::: {#tbl-RF-CM-BOW .cell tbl-cap=’ Random Forest Confusion matrix for BoW model’} ::: {.cell-output-display} | | deKlerk| Mandela| Mbeki| Motlanthe| Ramaphosa| Zuma| class.error| |:———|——-:|——-:|—–:|———:|———:|—-:|———–:| |deKlerk | 10| 8| 17| 0| 11| 21| 0.8507463| |Mandela | 4| 315| 401| 3| 139| 296| 0.7279793| |Mbeki | 2| 215| 891| 2| 199| 375| 0.4709026| |Motlanthe | 0| 32| 69| 1| 30| 54| 0.9946237| |Ramaphosa | 0| 98| 287| 0| 819| 387| 0.4852294| |Zuma | 2| 121| 352| 2| 286| 1081| 0.4137744| ::: :::\nFor the presidents with fewer speeches in the dataset, such as deKlerk and Motlanthe, the error rates are notably high, with deKlerk reaching an error rate of 85.1% and Motlanthe experiencing a much more substantial error rate of 99.5%. Interestingly, this analysis reveals recurring patterns where a significant portion of deKlerk’s speeches are misclassified as Zuma, and Motlanthe’s speeches are predominantly classified as Mbeki.\nOn the other hand, for more prolific presidents like Mbeki and Zuma, the error rates are comparatively lower, with Mbeki achieving an error rate of 47.1% and Zuma having an error rate of 41.4%. However, it’s worth noting that the error rate for Zuma’s speeches has seen a notable increase in comparison to previous models, while Mbeki’s error rate has seen a significant decrease. These observations shed light on the model’s performance in handling classes with imbalanced data, indicating potential areas for improvement in correctly classifying the speeches of less frequently represented presidents.\n\n\n\n\n\nFigure 5: RF Variable Importance\n\n\n\n\nFigure 5 shows the top 30 most important features, each possessing a mean decrease Gini score exceeding 5. This score reflects the feature’s contribution to the reduction of Gini impurity, with higher scores indicating greater importance in the model’s predictive capability. The analysis has identified the two most influential words as ‘compatriots’ and ‘regard,’ both exhibiting mean decrease Gini scores exceeding 30. Following ,with a score of almost half, are ‘rand’ and ‘capture’ with mean decrease Gini scores just below 15. The same modelling is conducted on the TF-IDF data and the results were as follows:\n\n\n\n\n\nThe gradual decrease in error rate is almost identical to the bag of words model starting at about 60% and falling to 52% after 20 trees. This similarity may suggest that, at least up to this point, the additional complexity brought by the ensemble learning technique (as represented by the number of trees) yields a consistent and comparable improvement in predictive accuracy for both the BoW model and TF-IDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\nclass.error\n\n\n\n\ndeKlerk\n1\n9\n19\n0\n7\n32\n0.9852941\n\n\nMandela\n0\n246\n449\n3\n162\n306\n0.7890223\n\n\nMbeki\n2\n237\n829\n1\n206\n419\n0.5106257\n\n\nMotlanthe\n0\n26\n74\n0\n33\n54\n1.0000000\n\n\nRamaphosa\n0\n104\n253\n2\n731\n511\n0.5434104\n\n\nZuma\n3\n124\n256\n3\n308\n1166\n0.3731183\n\n\n\n\n\nThe depicted figure presents class errors in the TD-IDF model for each president. In comparison to the BoW approach, only sentences attributed to Zuma and Mbeki exhibited improved performance. Other presidents experienced an increase in class errors. For instance, DeKlerk’s class error rose by 13%, while Ramaphosa’s class error saw an 8% increase. This shows how the TF-IDF was not effective across all the presidential classes although it did record a lower overall classification rate of 50,6% compared to that of the BoW which was 51.1%. The figure below shows that the TF-IDF model had similar mean decrease Gini for the words of importance,with the addition of some stop words which were not remove in the case of this model such as ‘the’ and ‘of’\n\n\n\n\n\n\n\nFeed Forward Neural Network(FFNN)\nA feedforward neural network (FFNN) is a specific type of neural network architecture in which information flows in a unidirectional manner, from the input to the output, with no feedback loops from the outputs to the inputs. Neural networks are designed to recognize patterns in data and make more accurate decisions than traditional rule-based systems. An FFNN consists of three essential types of layers:\n\nInput Layer: The input layer is the initial component of the network where raw data is introduced. The number of nodes in this layer is determined by the number of variables or features present in the dataset. Each node corresponds to one of these input variables.\nHidden Layer(s): Hidden layers do the bulk of the work in the neural network. They receive the data from the input layer through weighted connections, where each connection has an associated weight and bias. These weights and biases represent the strength and offset of the connection, and they are adjusted during the training process to optimize the network’s performance. Within the hidden layer, a mathematical transformation known as an activation function is applied to the weighted inputs. This activation function introduces a non-linear aspect to the data, allowing the network to capture more complex relationships within the data. Different types of activation functions can be used, impacting how well the neural network learns and generalizes from the data.\nOutput Layer: The output layer is the final stage of the network responsible for producing the predicted values or classifications for each observation. The number of nodes in this layer is typically determined by the number of classes in categorical data or the desired output format. Each output node represents the probability that an observation belongs to a specific. The class with the highest probability is selected as the network’s prediction.\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n0\n5\n6\n8\n2\n1\n7\n\n\n1\n0\n253\n129\n4\n13\n99\n\n\n2\n0\n164\n380\n3\n16\n156\n\n\n3\n0\n26\n31\n3\n2\n15\n\n\n4\n0\n141\n108\n6\n89\n336\n\n\n5\n1\n87\n124\n2\n26\n553\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n0\n9\n10\n4\n0\n2\n4\n\n\n1\n2\n311\n123\n1\n38\n24\n\n\n2\n0\n169\n404\n6\n59\n86\n\n\n3\n1\n21\n35\n7\n4\n11\n\n\n4\n0\n120\n40\n3\n428\n94\n\n\n5\n0\n140\n101\n4\n137\n414"
  },
  {
    "objectID": "Assignment1.html#discussion",
    "href": "Assignment1.html#discussion",
    "title": "STA5073Z Assignment 1",
    "section": "Discussion",
    "text": "Discussion"
  },
  {
    "objectID": "Assignment1.html#conclusion",
    "href": "Assignment1.html#conclusion",
    "title": "STA5073Z Assignment 1",
    "section": "Conclusion",
    "text": "Conclusion\nPotentially explore CNNs for even higher accuracy results -It is proven that CNN has significance in the image processing domain by classifying and identifying the object, but it is highly feasible for using CNN in NLP domains.(rephrase)"
  },
  {
    "objectID": "docs/index.html",
    "href": "docs/index.html",
    "title": "STA5073Z Assignment 1",
    "section": "",
    "text": "This study focuses on the aspect of machine learning and natural language processing to identify and rank various models for predictive purposes, specifically in the context of classifying sentences to South African presidents based on speeches from 1994 to 2022. The study explores the effectiveness of classification trees, feedforward neural networks (FFNN), and random forests while employing two different input structuring techniques: Bag of Words (BoW) and Term Frequency-Inverse Document Frequency (TF-IDF). The study draws from previous research, showcasing the versatility of BoW and TF-IDF in various applications and machine learning context in preparing text data for analytics. It also draws attention to the importance in choice between these techniques depends on the specific machine learning algorithms and kind of data being assessed. The findings reveal that FFNN performed slightly better than the other models but was still unable to effectively classify speeches to their respective presidents as the data was not equally representative of all the presidents."
  },
  {
    "objectID": "docs/index.html#abstract",
    "href": "docs/index.html#abstract",
    "title": "STA5073Z Assignment 1",
    "section": "",
    "text": "This study focuses on the aspect of machine learning and natural language processing to identify and rank various models for predictive purposes, specifically in the context of classifying sentences to South African presidents based on speeches from 1994 to 2022. The study explores the effectiveness of classification trees, feedforward neural networks (FFNN), and random forests while employing two different input structuring techniques: Bag of Words (BoW) and Term Frequency-Inverse Document Frequency (TF-IDF). The study draws from previous research, showcasing the versatility of BoW and TF-IDF in various applications and machine learning context in preparing text data for analytics. It also draws attention to the importance in choice between these techniques depends on the specific machine learning algorithms and kind of data being assessed. The findings reveal that FFNN performed slightly better than the other models but was still unable to effectively classify speeches to their respective presidents as the data was not equally representative of all the presidents."
  },
  {
    "objectID": "docs/index.html#introduction",
    "href": "docs/index.html#introduction",
    "title": "STA5073Z Assignment 1",
    "section": "Introduction",
    "text": "Introduction\nThe aim of this paper is to identify different machine learning models that can be used for predictive purposes, and rank them according to their ability to do so. With presidential speech from 1994 to 2022 from South African presidents, this paper will review the capacity in which classification trees , feed forward neural networks and random forests are able to accurately classify sentences to their presidents. The input structuring process will also vary between bag of words and TF-IDF so as to ascertain which one is more suitable for the data at hand with a selected machine learning model."
  },
  {
    "objectID": "docs/index.html#exploratory-data-analysis",
    "href": "docs/index.html#exploratory-data-analysis",
    "title": "STA5073Z Assignment 1",
    "section": "Exploratory Data analysis",
    "text": "Exploratory Data analysis\nThe dataset is made up of speeches across a span of 28 years by the last 6 presidents of South Africa.\n\n\n\n\n\nFigure 1: Top 20 words\n\n\n\n\nFigure 1 analysis offers a view into the evolution of linguistic patterns of the different presidents, excluding common stop words commonly found in sentences. A notable shift in the tone of State of the Nation addresses becomes evident when examined over the terms of the presidents.\nDuring De Klerk’s tenure, a government-centric tone is evident, characterized by a notable emphasis on references to the constitution, political parties, and elections. Subsequent presidents, however, steered their rhetoric towards the betterment of the nation. Mandela and Mbeki, in particular, championed themes of social welfare and upliftment. Being the first two presidents post-apartheid presidents their main goals were to rebuild the country and break down the racial barriers. Motlanthe, Zuma, and Ramaphosa, on the other hand, honed their focus on fostering the country’s economic development. This shift in presidential language reflects the dynamic trajectory of South Africa’s national priorities and the evolving role of its leadership in addressing the needs of the nation.\n\n\n\n\n\nFigure 2: Average Sentence Length\n\n\n\n\nFigure 2 shows long long each presidents speeches run on average."
  },
  {
    "objectID": "docs/index.html#methods",
    "href": "docs/index.html#methods",
    "title": "STA5073Z Assignment 1",
    "section": "Methods",
    "text": "Methods\n\nInput Methods\n\nBag-of words\nIn the realm of natural language processing, Bag-of-Words (BoW) stands as a valuable text modeling tool. Its primary function is to facilitate the extraction of essential keywords from text while filtering out less critical information. The BoW process begins by establishing a vocabulary based on the words present in the text data. It then represents various speeches by quantifying the frequency of these keywords within each speech. The resulting dataset is an array of speeches against keywords, each entry reflecting the frequency of a specific keyword in a given speech. This foundational approach serves as the basis for machine learning models employed to classify speeches to the president that gave them. The machine learning models tradionally work with numerical data rather than textual data. Text data is unstructured and ML models can only operate with structured data that is well defined so by BoW technique the techniques can be integrated with more ease.\nNotably, BoW has found applications in diverse contexts, such as a study in India where it was integrated with Convolutional Neural Networks to classify cases based on keyword analysis from case files. Remarkably, this study achieved an average accuracy rate of 85% (Pillai & Chandran, 2020). The following is a snippet of the BoW done on the SONA speeches. It does how the key words across all speeches become the columns of the array and the tally of each word in the two speeches is in their intersection.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSent_ID\npresident_13\ncommanders\ncomrades\ncorps\ndeputy\ndiplomatic\ndistinguished\n\n\n\n\n1\nMandela\n1\n1\n1\n3\n1\n1\n\n\n2\nMandela\n0\n0\n0\n0\n0\n0\n\n\n3\nMandela\n0\n0\n0\n0\n0\n0\n\n\n4\nMandela\n0\n0\n0\n0\n0\n0\n\n\n5\nMandela\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n?@tbl-bag-of-words\n\n\nTf-Idf\nTerm Frequency- Inverse Document Frequency (TF_IDF) is another input method used for text modelling.  It is similar to  BoW in that it considers the number of times a word is used in a line of text however, it also factors in how important that word is relative to the other words in the document. The TF measures how frequently a term appears in a document by diving the total number of times the term appears in the document by the total number of terms within that document. This emphasizes the terms that occur more frequently than others. The IDF  measures uniqueness/rarity of a term across a collection of documents. It is calculated by taking the logarithm of the total number of documents in the collection divided by the number of documents containing the term. The logarithm is used to scale down the impact of common words. The two part of the statistical measure are calculated as follows:\n\nTerm Frequency:  (Number of times the term appears in the document) / (Total number of terms in the document)\nInverse Document Frequency= In(Total number of documents / Number of documents containing the term)\n\nThere have been studies conducted using both BoW and TF-IDF which found that TF-IDF generally out performed BoW when combined with ML models,  however this will not always be the cases because there are countless ML algorithms that exist and each one has a particular method that will allow for the best fit with a given dataset. For example, a study conducted to identify hate speech in tweets found that TF_IDF performed best with Decision trees while BoW performed best with logistic regression, each method obtaining relatively high accuracies. (Akuma et al., 2022)\n\n\n\n\nTable 1: Snippet of TF-IDF\n\n\n\n\n\n\n\n\n\n\n\nSent_ID\npresident_13\nthe\nto\nof\nand\nnational\n\n\n\n\n3921\nMbeki\n-98.22858\n-41.35940\n-62.03910\n-46.52933\n0.000000\n\n\n4688\nMotlanthe\n-98.22858\n-20.67970\n-49.11429\n-41.35940\n-10.339850\n\n\n2887\nMbeki\n-82.71880\n-36.18948\n-69.79399\n-56.86917\n-2.584963\n\n\n3790\nMbeki\n-56.86917\n-74.96391\n-38.77444\n-23.26466\n0.000000\n\n\n5200\nZuma\n-41.35940\n0.00000\n-64.62406\n-20.67970\n-10.339850\n\n\n\n\n\n\nTable 1\n\n\n\nPredictive Models & Results\n\nClassification Trees\n\n\n\n\n\nFigure 3: Classification Tree for Bag-of-Words model\n\n\n\n\nFigure 3 shows a classification tree when text is modelled by BoW. The tree does not have a lot of branches which is indicative of poor classification. The only two presidents can be classified are Mbeki and Zuma , which means every sentence put into the model will return either one of those presidents which is not true. The following table shows the classification using the test dataset:\n\n\n\n\nTable 2: Confusion matrix for Bag-of-words model\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\n\n\n\n\ndeKlerk\n0\n0\n1\n0\n0\n28\n\n\nMandela\n0\n0\n16\n0\n0\n482\n\n\nMbeki\n0\n0\n55\n0\n0\n664\n\n\nMotlanthe\n0\n0\n9\n0\n0\n68\n\n\nRamaphosa\n0\n0\n0\n0\n0\n680\n\n\nZuma\n0\n0\n8\n0\n0\n785\n\n\n\n\n\n\nThe recorded classification rate of this model was 30% meaning the model The model is performing better than random guessing but still has significant room for improvement. The possible reasons for this low classification are unclear as it could be attributed to the model’s performance itself or underlying issues with the data. As previously mentioned in the data analysis, the number of speeches each president makes is different with some making one and others making more than 5, causing a high degree of class imbalance.\n\n\n\n\n\n?@fig-CT_TF-IDF\n\n\n\n\nTable 3: Confusion matrix for TF-IDF model\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\n\n\n\n\ndeKlerk\n0\n0\n10\n0\n0\n19\n\n\nMandela\n0\n0\n287\n0\n0\n212\n\n\nMbeki\n0\n0\n444\n0\n0\n280\n\n\nMotlanthe\n0\n0\n46\n0\n0\n33\n\n\nRamaphosa\n0\n0\n260\n0\n0\n425\n\n\nZuma\n0\n0\n178\n0\n0\n618\n\n\n\n\n\n\nTable 3\nThe classification rate achieved using the TF-IDF tool stands at 37.8%, demonstrating a slight improvement compared to the performance of the bag of words method, which doesn’t take into account the associated word weights. The table above shows how the observations are still only distributed between Mbeki and Zuma but this time the classification of the observations is more equally distributed between the two. Nevertheless, this accuracy rate remains notably low, suggesting that a basic classification tree might not be the most effective predictive model for the speech text data under investigation. Consequently, the next model to be explored will build upon the foundation of these basic classification trees, aiming to enhance predictive performance and capture the underlying complexities of the text data.\n\n\nRandom Forest\nRandom Forest revolves around an ensemble of decision trees reinforced by bagging. Bagging, short for Bootstrap Aggregating, reduces variance and adds stability to these decision trees. It begins by creating multiple subsets of the training data, each of equal size to the original dataset, formed by random selection with potential repetition. These bootstrapped subsets are then used to independently build individual decision trees, each providing a unique perspective on the text data. Once the trees are constructed, they collectively contribute to the final prediction through a majority vote. This aggregation enhances robustness and accuracy, particularly beneficial for text data.\nAdditionally, Random Forest introduces random feature selection, where only a subset of features is considered at each node during tree construction, helping to reduce correlation between the trees and avoid overfitting, which is a common challenge when dealing with high-dimensional text data. Additionally, it offers the capability to assess variable importance by considering the random feature selection, providing insights into the crucial elements determining the president which said the given sentence. The figure below shows the error rate of the random forest as the number of trees increase.\n\n\n\n\n\nFigure 4: BoW Random forest error rate\n\n\n\n\nFigure 4\nAs the number of trees in the model increases, it acquires a deeper understanding of the data, leading to a reduction in the error rate. Beginning with an initial error rate of 60%, by the 20th tree, the model shows improvement, successfully decreasing the error rate by 10%. This method is computationally expensive and so only 20 trees were considered. At this point it is unclear whether an increase in the number of trees will improve the accuracy of the test or lead to diminishing returns. All that can be said is that the error rate is better than that of the previous model.\n::: {#tbl-RF-CM-BOW .cell tbl-cap=’ Random Forest Confusion matrix for BoW model’} ::: {.cell-output-display} | | deKlerk| Mandela| Mbeki| Motlanthe| Ramaphosa| Zuma| class.error| |:———|——-:|——-:|—–:|———:|———:|—-:|———–:| |deKlerk | 10| 8| 17| 0| 11| 21| 0.8507463| |Mandela | 4| 315| 401| 3| 139| 296| 0.7279793| |Mbeki | 2| 215| 891| 2| 199| 375| 0.4709026| |Motlanthe | 0| 32| 69| 1| 30| 54| 0.9946237| |Ramaphosa | 0| 98| 287| 0| 819| 387| 0.4852294| |Zuma | 2| 121| 352| 2| 286| 1081| 0.4137744| ::: :::\nFor the presidents with fewer speeches in the dataset, such as deKlerk and Motlanthe, the error rates are notably high, with deKlerk reaching an error rate of 85.1% and Motlanthe experiencing a much more substantial error rate of 99.5%. Interestingly, this analysis reveals recurring patterns where a significant portion of deKlerk’s speeches are misclassified as Zuma, and Motlanthe’s speeches are predominantly classified as Mbeki.\nOn the other hand, for more prolific presidents like Mbeki and Zuma, the error rates are comparatively lower, with Mbeki achieving an error rate of 47.1% and Zuma having an error rate of 41.4%. However, it’s worth noting that the error rate for Zuma’s speeches has seen a notable increase in comparison to previous models, while Mbeki’s error rate has seen a significant decrease. These observations shed light on the model’s performance in handling classes with imbalanced data, indicating potential areas for improvement in correctly classifying the speeches of less frequently represented presidents.\n\n\n\n\n\nFigure 5: RF Variable Importance\n\n\n\n\nFigure 5 shows the top 30 most important features, each possessing a mean decrease Gini score exceeding 5. This score reflects the feature’s contribution to the reduction of Gini impurity, with higher scores indicating greater importance in the model’s predictive capability. The analysis has identified the two most influential words as ‘compatriots’ and ‘regard,’ both exhibiting mean decrease Gini scores exceeding 30. Following ,with a score of almost half, are ‘rand’ and ‘capture’ with mean decrease Gini scores just below 15. The same modelling is conducted on the TF-IDF data and the results were as follows:\n\n\n\n\n\nThe gradual decrease in error rate is almost identical to the bag of words model starting at about 60% and falling to 52% after 20 trees. This similarity may suggest that, at least up to this point, the additional complexity brought by the ensemble learning technique (as represented by the number of trees) yields a consistent and comparable improvement in predictive accuracy for both the BoW model and TF-IDF.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndeKlerk\nMandela\nMbeki\nMotlanthe\nRamaphosa\nZuma\nclass.error\n\n\n\n\ndeKlerk\n1\n9\n19\n0\n7\n32\n0.9852941\n\n\nMandela\n0\n246\n449\n3\n162\n306\n0.7890223\n\n\nMbeki\n2\n237\n829\n1\n206\n419\n0.5106257\n\n\nMotlanthe\n0\n26\n74\n0\n33\n54\n1.0000000\n\n\nRamaphosa\n0\n104\n253\n2\n731\n511\n0.5434104\n\n\nZuma\n3\n124\n256\n3\n308\n1166\n0.3731183\n\n\n\n\n\nThe depicted figure presents class errors in the TD-IDF model for each president. In comparison to the BoW approach, only sentences attributed to Zuma and Mbeki exhibited improved performance. Other presidents experienced an increase in class errors. For instance, DeKlerk’s class error rose by 13%, while Ramaphosa’s class error saw an 8% increase. This shows how the TF-IDF was not effective across all the presidential classes although it did record a lower overall classification rate of 50,6% compared to that of the BoW which was 51.1%. The figure below shows that the TF-IDF model had similar mean decrease Gini for the words of importance,with the addition of some stop words which were not remove in the case of this model such as ‘the’ and ‘of’\n\n\n\n\n\n\n\nFeed Forward Neural Network(FFNN)\nA feedforward neural network (FFNN) is a specific type of neural network architecture in which information flows in a unidirectional manner, from the input to the output, with no feedback loops from the outputs to the inputs. Neural networks are designed to recognize patterns in data and make more accurate decisions than traditional rule-based systems. An FFNN consists of three essential types of layers:\n\nInput Layer: The input layer is the initial component of the network where raw data is introduced. The number of nodes in this layer is determined by the number of variables or features present in the dataset. Each node corresponds to one of these input variables.\nHidden Layer(s): Hidden layers do the bulk of the work in the neural network. They receive the data from the input layer through weighted connections, where each connection has an associated weight and bias. These weights and biases represent the strength and offset of the connection, and they are adjusted during the training process to optimize the network’s performance. Within the hidden layer, a mathematical transformation known as an activation function is applied to the weighted inputs. This activation function introduces a non-linear aspect to the data, allowing the network to capture more complex relationships within the data. Different types of activation functions can be used, impacting how well the neural network learns and generalizes from the data.\nOutput Layer: The output layer is the final stage of the network responsible for producing the predicted values or classifications for each observation. The number of nodes in this layer is typically determined by the number of classes in categorical data or the desired output format. Each output node represents the probability that an observation belongs to a specific. The class with the highest probability is selected as the network’s prediction.\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n0\n5\n6\n8\n2\n1\n7\n\n\n1\n0\n253\n129\n4\n13\n99\n\n\n2\n0\n164\n380\n3\n16\n156\n\n\n3\n0\n26\n31\n3\n2\n15\n\n\n4\n0\n141\n108\n6\n89\n336\n\n\n5\n1\n87\n124\n2\n26\n553\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\n0\n9\n10\n4\n0\n2\n4\n\n\n1\n2\n311\n123\n1\n38\n24\n\n\n2\n0\n169\n404\n6\n59\n86\n\n\n3\n1\n21\n35\n7\n4\n11\n\n\n4\n0\n120\n40\n3\n428\n94\n\n\n5\n0\n140\n101\n4\n137\n414"
  },
  {
    "objectID": "docs/index.html#discussion",
    "href": "docs/index.html#discussion",
    "title": "STA5073Z Assignment 1",
    "section": "Discussion",
    "text": "Discussion"
  },
  {
    "objectID": "docs/index.html#conclusion",
    "href": "docs/index.html#conclusion",
    "title": "STA5073Z Assignment 1",
    "section": "Conclusion",
    "text": "Conclusion\nPotentially explore CNNs for even higher accuracy results -It is proven that CNN has significance in the image processing domain by classifying and identifying the object, but it is highly feasible for using CNN in NLP domains.(rephrase)"
  }
]